<?php

namespace Tests\Feature;

use App\Enums\OrderStatus;
use App\Models\Message;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;

class MyOrdersTest extends TestCase
{
    protected function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testMyPurchasesAsGuest()
    {
        $this->get(route('account.orders'))
            ->assertRedirect(route('login'))
            ->assertStatus(302);
    }


    public function testShowOrderByAnotherUserOrGuest()
    {
        $this->createOfferWithOptions();
        $this->createUser();
        $anotherUser = $this->createUser();
        $order = $this->createOrderDirectly([
            'status' => OrderStatus::accepting()
        ]);

        $this->actingAs($anotherUser);
        $this->get(route('account.orders.view', $order->id))
            ->assertStatus(403);
    }

    public function testNotFoundOrderWhenNotPaid()
    {
        $offer = $this->createOfferWithOptions();

        $order = $this->createOrder($offer);
        $this->actingAs($order->buyer);

        $this->get(route('account.orders.view', $order->id))
            ->assertStatus(302)
            ->assertRedirect(route('offer.checkout.view', [$offer->user->name, $offer->alias]));

        $this->payOrder($order);
        $this->get(route('account.orders.view', $order->id))
            ->assertStatus(200);
    }

    public function testSendMessages()
    {
        $order = $this->prepareOrder();
        $this->sendMessage($order, $order->buyer, 'test message #1 from buyer');
        $this->sendMessage($order, $order->buyer, 'test message #2 from buyer');
        $this->sendMessage($order, $order->seller, 'test message from seller');

        $this->assertCount(3, $order->messages);
    }

    public function testAMessageWithImages()
    {
        $order = $this->prepareOrder();

        $images = [
            UploadedFile::fake()->image('img1.jpg', 100, 200),
            UploadedFile::fake()->image('img2.jpg', 110, 210),
        ];
        $this->sendMessage($order, $order->buyer, 'test message with 2 images', $images);

        $this->assertCount(1, $order->messages);

        /** @var Message $message */
        $message = $order->messages()->first();
        $images = $message->getImages();
        $this->assertCount(2, $images);
    }

    public function testUploadSketchAndFinal()
    {
        $order = $this->prepareOrder();
        $this->payOrder($order);

        $this->actingAs($order->seller);
        $this->orderStatusService->accept($order->seller, $order);

        $this->post(route('account.orders.upload', $order->id), [
            'sketches' => [
                UploadedFile::fake()->image('img1.jpg', 100, 200),
                UploadedFile::fake()->image('img2.jpg', 110, 210),
            ],
        ])
            ->assertRedirect(route('account.orders.view', [$order->id]));

        $this->assertEquals(2, $order->getSketchMedia()->count(), 'Must be uploaded 2 sketches');
        $this->assertEquals(0, $order->getFinalMedia()->count(), 'Expect no final media');

        $this->post(route('account.orders.upload', $order->id), [
            'sketches' => [
                UploadedFile::fake()->image('img3.jpg', 100, 200),
            ],
            'final'    => UploadedFile::fake()->image('img4.jpg', 100, 200),
        ])
            ->assertRedirect(route('account.orders.view', [$order->id]));
        $order->refresh();
        $this->assertEquals(3, $order->getSketchMedia()->count(), 'Must be uploaded 3 sketches');
        $this->assertEquals(1, $order->getFinalMedia()->count(), 'Must be upload 1 final');
    }
}